@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "sass:meta";

// List of variables
$font-color: #231f20;
$primary-background: #fff;
$splash-background: hsl(147, 64%, 61%);
$darker-splash: hsl(147, 30%, 35%);
$green-hover: hsl(148, 65%, 92%);

$slight-shadow: 0 0.0625rem 0.1875rem rgba(0, 0, 0, 0.12),
    0 0.0625rem 0.125rem rgba(0, 0, 0, 0.24);

$body-font: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,
    'Helvetica Neue', Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji',
    'Segoe UI Symbol';
$header-font: 'bitter', serif;

$color_variables: (
    'font-color': $font-color,
    'primary-background': $primary-background,
    'splash-background': $splash-background
);

// Adds in a css custom property and the correct sass variable for best compat
@mixin css-variable($style-property, $variable) {
    #{$style-property}: map.get($color_variables, $variable);
    #{$style-property}: var(--#{$variable});
}

$rem-baseline: 16px;
$rem-fallback: false;
$rem-px-only: false;

@function rem-separator($list, $separator: false) {
    @if $separator == 'comma' or $separator == 'space' {
        @return list.append($list, null, $separator);
    }

    @if meta.function-exists('list-separator') == true {
        @return list.separator($list);
    }

    // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
    $test-list: ();
    @each $item in $list {
        $test-list: list.append($test-list, $item, space);
    }

    @return if($test-list == $list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
    font-size: math.div($zoom, 16px) * $rem-baseline;
}

@function rem-convert($to, $values...) {
    $result: ();
    $separator: rem-separator($values);

    @each $value in $values {
        @if meta.type-of($value) ==
            'number' and
            math.unit($value) ==
            'rem' and
            $to ==
            'px'
        {
            $result: list.append(
                $result,
                math.div($value, 1rem) * $rem-baseline,
                $separator
            );
        } @else if
            meta.type-of($value) ==
            'number' and
            math.unit($value) ==
            'px' and
            $to ==
            'rem'
        {
            $result: list.append(
                $result,
                math.div($value, $rem-baseline) * 1rem,
                $separator
            );
        } @else if meta.type-of($value) == 'list' {
            $value-separator: rem-separator($value);
            $value: rem-convert($to, $value...);
            $value: rem-separator($value, $value-separator);
            $result: list.append($result, $value, $separator);
        } @else {
            $result: list.append($result, $value, $separator);
        }
    }

    @return if(list.length($result) == 1, list.nth($result, 1), $result);
}

@function rem($values...) {
    @if $rem-px-only {
        @return rem-convert(px, $values...);
    } @else {
        @return rem-convert(rem, $values...);
    }
}

@mixin rem($properties, $values...) {
    @if meta.type-of($properties) == 'map' {
        @each $property in map.keys($properties) {
            @include rem($property, map.get($properties, $property));
        }
    } @else {
        @each $property in $properties {
            @if $rem-fallback or $rem-px-only {
                #{$property}: rem-convert(px, $values...);
            }
            @if not $rem-px-only {
                #{$property}: rem-convert(rem, $values...);
            }
        }
    }
}
